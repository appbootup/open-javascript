// Generated by CoffeeScript 1.8.0
(function() {
  var $, CardToken, CreditCard, Gateway, Netbanking, PaymentMode, PrepaidCard, Wallet, clone, createPaymentMode, escapeHtmlEntities, formatExipry, isEmail, _2bankCode, _2scheme,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  $ = jQuery;

  $.citrus = {};

  $.support.cors = true;

  escapeHtmlEntities = function(html) {
    var entities;
    entities = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;'
    };
    return html.replace(/[&<>]/g, function(entity) {
      return entities[entity] || entity;
    });
  };

  isEmail = function(str) {
    return /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(str);
  };

  PaymentMode = (function() {
    function PaymentMode(type) {
      this.type = type;
    }

    return PaymentMode;

  })();

  Netbanking = (function(_super) {
    __extends(Netbanking, _super);

    function Netbanking(code) {
      this.code = code;
      Netbanking.__super__.constructor.call(this, 'netbanking');
    }

    Netbanking.prototype.validate = function() {
      if (!this.code) {
        throw {
          error: 'invalid_bank_code'
        };
      }
      return true;
    };

    Netbanking.prototype.asChargePaymentOption = function() {
      return {
        type: 'paymentOptionToken',
        paymentMode: {
          type: this.type,
          code: this.code,
          bank: ''
        }
      };
    };

    Netbanking.prototype.asWalletPaymentOption = function() {
      return {
        type: 'payment',
        defaultOption: '',
        paymentOptions: [
          {
            type: this.type,
            bank: this.code
          }
        ]
      };
    };

    return Netbanking;

  })(PaymentMode);

  CreditCard = (function(_super) {
    __extends(CreditCard, _super);

    function CreditCard(number, holder, expiry, cvv) {
      this.holder = holder;
      this.cvv = cvv;
      CreditCard.__super__.constructor.call(this, 'credit');
      this.number = number.replace(/\s+/g, '');
      this.xd = $.payment.cardExpiryVal(expiry);
    }

    CreditCard.prototype.expiry = function() {
      var month;
      month = this.xd.month.toString();
      return ('0' + month).slice(month.length - 1) + '/' + this.xd.year.toString();
    };

    CreditCard.prototype.scheme = function() {
      switch ($.payment.cardType(this.number)) {
        case 'visa':
          return 'VISA';
        case 'mastercard':
          return 'MCRD';
        case 'maestro':
          return 'MTRO';
        case 'amex':
          return 'AMEX';
        case 'dinersclub':
          return 'DINERS';
        default:
          throw {
            error: 'unsupported_card_scheme'
          };
      }
    };

    CreditCard.prototype.validate = function() {
      if (!$.payment.validateCardNumber(this.number)) {
        throw {
          error: 'invalid_card_number'
        };
      }
      if (!$.payment.validateCardExpiry(this.xd.month, this.xd.year)) {
        throw {
          error: 'invalid_card_expiry'
        };
      }
      if (!$.payment.validateCardCVC(this.cvv)) {
        throw {
          error: 'invalid_card_cvv'
        };
      }
      return true;
    };

    CreditCard.prototype.asChargePaymentOption = function() {
      return {
        type: 'paymentOptionToken',
        paymentMode: {
          type: 'credit',
          scheme: this.scheme(),
          number: this.number,
          holder: this.holder,
          expiry: this.expiry(),
          cvv: this.cvv
        }
      };
    };

    CreditCard.prototype.asWalletPaymentOption = function() {
      return {
        type: 'payment',
        defaultOption: '',
        paymentOptions: [
          {
            type: this.type,
            number: this.number,
            owner: escapeHtmlEntities(this.holder),
            scheme: this.scheme(),
            expiryDate: this.expiry()
          }
        ]
      };
    };

    return CreditCard;

  })(PaymentMode);

  PrepaidCard = (function(_super) {
    __extends(PrepaidCard, _super);

    function PrepaidCard(holder) {
      this.holder = holder;
      PrepaidCard.__super__.constructor.call(this, 'prepaid');
    }

    PrepaidCard.prototype.validate = function() {
      if (!isEmail(this.holder)) {
        throw {
          error: 'invalid_card_holder'
        };
      }
      return true;
    };

    PrepaidCard.prototype.asChargePaymentOption = function() {
      return {
        type: 'paymentOptionToken',
        paymentMode: {
          type: 'prepaid',
          scheme: 'CPAY',
          number: '',
          holder: this.holder,
          expiry: '',
          cvv: ''
        }
      };
    };

    return PrepaidCard;

  })(PaymentMode);

  CardToken = (function(_super) {
    __extends(CardToken, _super);

    function CardToken(token, cvv) {
      this.token = token;
      this.cvv = cvv;
      CardToken.__super__.constructor.call(this, 'token');
    }

    CardToken.prototype.validate = function() {
      if (!this.token) {
        throw {
          error: 'invalid_token'
        };
      }
      if (!this.cvv) {
        throw {
          error: 'invalid_card_cvv'
        };
      }
      return true;
    };

    CardToken.prototype.asChargePaymentOption = function() {
      return {
        type: 'paymentOptionIdToken',
        id: this.token,
        cvv: this.cvv
      };
    };

    return CardToken;

  })(PaymentMode);

  createPaymentMode = function(paymentOptions) {
    switch (paymentOptions.mode) {
      case 'token':
        return new CardToken(paymentOptions.token, paymentOptions.tokenCvv);
      case 'card':
        return new CreditCard(paymentOptions.cardNumber, paymentOptions.cardHolder, paymentOptions.cardExpiry, paymentOptions.cardCvv);
      case 'netbanking':
        return new Netbanking(paymentOptions.bankCode);
      case 'prepaid':
        return new PrepaidCard(paymentOptions.cardHolder);
      default:
        throw {
          error: 'invalid_payment_mode'
        };
    }
  };

  clone = function(obj) {
    var attr, copy;
    if (obj === null || typeof obj !== 'object') {
      return obj;
    } else {
      copy = {};
      for (attr in obj) {
        if (obj.hasOwnProperty(attr)) {
          copy[attr] = clone(obj[attr]);
        }
      }
      return copy;
    }
  };

  Gateway = (function() {
    function Gateway(env) {
      this.env = env;
    }

    Gateway.prototype.makePayment = function(bill, paymentOptions, callback) {
      var error, payment, paymentMode;
      try {
        paymentMode = $.citrus.paymentMode(paymentOptions);
        paymentMode.validate();
        payment = clone(bill);
        payment.paymentToken = paymentMode.asChargePaymentOption();
        return this.charge(payment, callback);
      } catch (_error) {
        error = _error;
        return callback(error);
      }
    };

    Gateway.prototype.charge = function(payment, callback) {
      var error;
      error = null;
      return $.ajax({
        type: 'POST',
        url: this.env + '/service/moto/authorize/struct/extended',
        contentType: 'application/json',
        data: JSON.stringify(payment)
      }).done(function(response) {
        if (response.pgRespCode === '0') {
          return callback(null, response.redirectUrl);
        } else {
          return callback({
            error: 'payment_processing_error',
            message: response.txMsg
          });
        }
      }).fail(function(xhr, status, message) {
        switch (xhr.status) {
          case 500:
            return callback({
              error: 'payment_server_error',
              message: message
            });
          default:
            return callback({
              error: 'network_error',
              message: message
            });
        }
      });
    };

    return Gateway;

  })();

  $.citrus.env = {
    local: 'http://localhost:8080/admin-site',
    staging: 'https://stgadmin.citruspay.com',
    sandbox: 'https://sandboxadmin.citruspay.com',
    production: 'https://admin.citruspay.com'
  };

  $.citrus.netbanking = function(code) {
    return new Netbanking(code);
  };

  $.citrus.card = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(CreditCard, args, function(){});
  };

  $.citrus.prepaid = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(PrepaidCard, args, function(){});
  };

  $.citrus.token = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(CardToken, args, function(){});
  };

  $.citrus.paymentMode = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return createPaymentMode.apply(null, args);
  };

  $.citrus.clone = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return clone.apply(null, args);
  };

  $.citrus.gateway = function(env) {
    if (env == null) {
      env = $.citrus.env.production;
    }
    return new Gateway(env);
  };

  _2scheme = function(cs) {
    switch (cs) {
      case 'VISA':
        return 'visa';
      case 'MCRD':
        return 'mastercard';
      case 'MTRO':
        return 'maestro';
      case 'AMEX':
        return 'amex';
      case 'DINERS':
        return 'dinersclub';
      default:
        throw {
          error: 'unsupported_card_scheme'
        };
    }
  };

  _2bankCode = function(bn) {
    switch (bn) {
      case 'ICICI Bank':
        return 'CID001';
      case 'AXIS Bank':
        return 'CID002';
      case 'Citibank':
        return 'CID003';
      case 'YES Bank':
        return 'CID004';
      case 'SBI Bank':
        return 'CID005';
      case 'Deutsche Bank':
        return 'CID006';
      case 'Union Bank':
        return 'CID007';
      case 'Indian Bank':
        return 'CID008';
      case 'Federal Bank':
        return 'CID009';
      case 'HDFC Bank':
        return 'CID010';
      case 'IDBI Bank':
        return 'CID011';
      case 'State Bank of Hyderabad':
        return 'CID012';
      case 'State Bank of Bikaner and Jaipur':
        return 'CID013';
      case 'State Bank of Mysore':
        return 'CID014';
      case 'State Bank of Travancore':
        return 'CID015';
      case 'Andhra Bank':
        return 'CID016';
      case 'Bank of Bahrain & Kuwait':
        return 'CID017';
      case 'Bank of Baroda Corporate Accounts':
        return 'CID018';
      case 'Bank of India':
        return 'CID019';
      case 'Bank of Baroda Retail Accounts':
        return 'CID020';
      case 'Bank of Maharashtra':
        return 'CID021';
      case 'Catholic Syrian Bank':
        return 'CID022';
      case 'Central Bank of India':
        return 'CID023';
      case 'City Union Bank':
        return 'CID024';
      case 'Corporation Bank':
        return 'CID025';
      case 'DCB Bank ( Development Credit Bank )':
        return 'CID026';
      case 'Indian Overseas Bank':
        return 'CID027';
      case 'IndusInd Bank':
        return 'CID028';
      case 'ING Vysya Bank':
        return 'CID029';
      case 'Jammu & Kashmir Bank':
        return 'CID030';
      case 'Karnataka Bank':
        return 'CID031';
      case 'Karur Vysya Bank':
        return 'CID032';
      case 'Kotak Mahindra Bank':
        return 'CID033';
      case 'Lakshmi Vilas Bank NetBanking':
        return 'CID034';
      case 'Oriental Bank of Commerce':
        return 'CID035';
      case 'Punjab National Bank Corporate Accounts':
        return 'CID036';
      case 'South Indian Bank':
        return 'CID037';
      case 'Standard Chartered Bank':
        return 'CID038';
      case 'Syndicate Bank':
        return 'CID039';
      case 'Tamilnad Mercantile Bank':
        return 'CID040';
      case 'United Bank of India':
        return 'CID041';
      case 'Vijaya Bank':
        return 'CID042';
      default:
        throw {
          error: 'invalid_bank_code'
        };
    }
  };

  formatExipry = function(expiry) {
    var xd;
    xd = {
      month: expiry.slice(0, 2),
      year: expiry.slice(2)
    };
    if (!$.payment.validateCardExpiry(xd.month, xd.year)) {
      throw {
        error: 'invalid_card_expiry'
      };
    }
    return '' + xd.month + '/' + xd.year;
  };

  Wallet = (function() {
    function Wallet(token, env) {
      this.token = token;
      this.env = env != null ? env : $.citrus.env.production;
    }

    Wallet.prototype.load = function(onCard, onNetbanking) {
      return $.ajax({
        type: 'GET',
        url: this.env + '/service/v2/profile/me/payment',
        headers: {
          Authorization: 'Bearer ' + this.token
        }
      }).done(function(response) {
        var option, _i, _len, _ref, _results;
        _ref = response.paymentOptions.reverse();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          option = _ref[_i];
          _results.push((function(option) {
            var x;
            try {
              switch (option.type) {
                case 'debit':
                case 'credit':
                  if (onCard) {
                    return onCard({
                      number: option.number.replace(/XXXX/g, '**** '),
                      holder: option.owner,
                      scheme: _2scheme(option.scheme),
                      expiry: formatExipry(option.expiryDate),
                      token: option.token
                    });
                  }
                  break;
                case 'netbanking':
                  if (onNetbanking) {
                    return onNetbanking({
                      name: option.bank,
                      code: _2bankCode(option.bank)
                    });
                  }
              }
            } catch (_error) {
              x = _error;
            }
          })(option));
        }
        return _results;
      });
    };

    Wallet.prototype.cards = function() {
      if (!this._cards) {
        this.load((function(_this) {
          return function(card) {
            if (!_this._cards) {
              _this._cards = [];
            }
            return _this._cards.push(card);
          };
        })(this));
      }
      return this._cards;
    };

    Wallet.prototype.netbankings = function() {
      if (!this._netbankings) {
        this.load(function() {}, (function(_this) {
          return function(netbanking) {
            if (!_this._netbankings) {
              _this._netbankings = [];
            }
            return _this._netbankings.push(netbanking);
          };
        })(this));
      }
      return this._netbankings;
    };

    Wallet.prototype.save = function(paymentOptions) {
      var paymentMode, paymentOption, x;
      try {
        paymentMode = $.citrus.paymentMode(paymentOptions);
        paymentOption = paymentMode.asWalletPaymentOption();
        return $.ajax({
          type: 'PUT',
          url: this.env + '/service/v2/profile/me/payment',
          contentType: 'application/json',
          headers: {
            Authorization: 'Bearer ' + this.token
          },
          data: JSON.stringify(paymentOption)
        });
      } catch (_error) {
        x = _error;
      }
    };

    return Wallet;

  })();

  $.citrus.wallet = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Wallet, args, function(){});
  };

}).call(this);
